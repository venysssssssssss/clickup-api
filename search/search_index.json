{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Doc CLICKUPAPI","text":""},{"location":"#this-code-has-the-focus-to-extract-transform-load-data-from-customfields-of-lists-in-clickup-ecosystem-the-code-consumes-data-from-clickup-api-clean-the-data-and-organize-them-for-powerbi-dashboards-creations","title":"This code has the focus to extract, transform &amp; load data from customfields of lists in clickup ecosystem. The code consumes data from ClickUP API, clean the data and organize them for powerbi dashboards creations.","text":""},{"location":"api/","title":"ClickUp API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The <code>ClickUpAPI</code> class interacts with the ClickUp API to fetch and process task data, using Redis for caching and supporting asynchronous HTTP requests.</p>"},{"location":"api/#class-clickupapi","title":"Class: ClickUpAPI","text":""},{"location":"api/#attributes","title":"Attributes:","text":"<ul> <li><code>api_key</code>: The API key for authentication with ClickUp.</li> <li><code>timezone</code>: The timezone to use for date/time conversions.</li> <li><code>headers</code>: Headers for HTTP requests, including the API key.</li> <li><code>semaphore</code>: Limits the number of concurrent tasks to avoid overwhelming the server.</li> <li><code>redis</code>: Redis client for caching.</li> <li><code>FIELD_NAMES_SET</code>: Set of field names for faster lookup.</li> </ul>"},{"location":"api/#methods","title":"Methods:","text":"<ul> <li><code>__init__(self, api_key: str, timezone: str, redis_url: str)</code>: Initializes the ClickUpAPI instance.</li> <li><code>test_redis_connection(self)</code>: Tests the connection to the Redis server.</li> <li><code>get_from_cache(self, key: str) -&gt; Union[List, None]</code>: Retrieves data from the Redis cache.</li> <li><code>set_in_cache(self, key: str, data: List, ttl: int = 600)</code>: Stores data in the Redis cache with a TTL.</li> <li><code>fetch_clickup_data(self, url: str, query: Dict, retries: int = 3) -&gt; Dict</code>: Asynchronously fetches data from the ClickUp API.</li> <li><code>fetch_all_tasks(self, url: str, query: Dict) -&gt; List[Dict]</code>: Asynchronously fetches all tasks, handling pagination.</li> <li><code>parse_task_text(self, task_text: str) -&gt; str</code>: Parses and cleans up task text.</li> <li><code>parse_date(self, timestamp: int) -&gt; str</code>: Converts a timestamp to a formatted date string.</li> <li><code>extract_field_values(self, task_text: str) -&gt; Dict[str, str]</code>: Extracts specific field values from task text using regex patterns.</li> <li><code>get_tasks(self, list_id: str) -&gt; List[Dict[str, Union[str, None]]]</code>: Fetches and caches tasks from a specific list.</li> <li><code>filter_tasks(self, tasks: List[Dict]) -&gt; List[Dict]</code>: Filters and processes tasks for specific fields and formatting.</li> </ul>"},{"location":"api/#detailed-method-documentation","title":"Detailed Method Documentation","text":""},{"location":"api/#__init__self-api_key-str-timezone-str-redis_url-str","title":"<code>__init__(self, api_key: str, timezone: str, redis_url: str)</code>","text":"<p>Initializes the ClickUpAPI instance.</p>"},{"location":"api/#parameters","title":"Parameters:","text":"<ul> <li><code>api_key</code> (str): The ClickUp API key.</li> <li><code>timezone</code> (str): The timezone for date/time conversions.</li> <li><code>redis_url</code> (str): The URL of the Redis server.</li> </ul>"},{"location":"api/#test_redis_connectionself","title":"<code>test_redis_connection(self)</code>","text":"<p>Tests the connection to the Redis server. Raises an HTTPException if the connection fails.</p>"},{"location":"api/#get_from_cacheself-key-str-unionlist-none","title":"<code>get_from_cache(self, key: str) -&gt; Union[List, None]</code>","text":"<p>Retrieves data from the Redis cache.</p>"},{"location":"api/#parameters_1","title":"Parameters:","text":"<ul> <li><code>key</code> (str): The cache key.</li> </ul>"},{"location":"api/#returns","title":"Returns:","text":"<ul> <li>Union[List, None]: The cached data or None if not found.</li> </ul>"},{"location":"api/#set_in_cacheself-key-str-data-list-ttl-int-600","title":"<code>set_in_cache(self, key: str, data: List, ttl: int = 600)</code>","text":"<p>Stores data in the Redis cache with a TTL.</p>"},{"location":"api/#parameters_2","title":"Parameters:","text":"<ul> <li><code>key</code> (str): The cache key.</li> <li><code>data</code> (List): The data to cache.</li> <li><code>ttl</code> (int, optional): Time-to-live for the cache entry. Default is 600 seconds.</li> </ul>"},{"location":"api/#fetch_clickup_dataself-url-str-query-dict-retries-int-3-dict","title":"<code>fetch_clickup_data(self, url: str, query: Dict, retries: int = 3) -&gt; Dict</code>","text":"<p>Asynchronously fetches data from the ClickUp API.</p>"},{"location":"api/#parameters_3","title":"Parameters:","text":"<ul> <li><code>url</code> (str): The API endpoint URL.</li> <li><code>query</code> (Dict): Query parameters for the API request.</li> <li><code>retries</code> (int, optional): Number of retry attempts in case of failure. Default is 3.</li> </ul>"},{"location":"api/#returns_1","title":"Returns:","text":"<ul> <li>Dict: The JSON response from the API.</li> </ul>"},{"location":"api/#fetch_all_tasksself-url-str-query-dict-listdict","title":"<code>fetch_all_tasks(self, url: str, query: Dict) -&gt; List[Dict]</code>","text":"<p>Asynchronously fetches all tasks, handling pagination.</p>"},{"location":"api/#parameters_4","title":"Parameters:","text":"<ul> <li><code>url</code> (str): The API endpoint URL.</li> <li><code>query</code> (Dict): Query parameters for the API request.</li> </ul>"},{"location":"api/#returns_2","title":"Returns:","text":"<ul> <li>List[Dict]: A list of tasks.</li> </ul>"},{"location":"api/#parse_task_textself-task_text-str-str","title":"<code>parse_task_text(self, task_text: str) -&gt; str</code>","text":"<p>Parses and cleans up task text.</p>"},{"location":"api/#parameters_5","title":"Parameters:","text":"<ul> <li><code>task_text</code> (str): The text content of a task.</li> </ul>"},{"location":"api/#returns_3","title":"Returns:","text":"<ul> <li>str: The cleaned-up task text.</li> </ul>"},{"location":"api/#parse_dateself-timestamp-int-str","title":"<code>parse_date(self, timestamp: int) -&gt; str</code>","text":"<p>Converts a timestamp to a formatted date string.</p>"},{"location":"api/#parameters_6","title":"Parameters:","text":"<ul> <li><code>timestamp</code> (int): The timestamp to convert.</li> </ul>"},{"location":"api/#returns_4","title":"Returns:","text":"<ul> <li>str: The formatted date string.</li> </ul>"},{"location":"api/#extract_field_valuesself-task_text-str-dictstr-str","title":"<code>extract_field_values(self, task_text: str) -&gt; Dict[str, str]</code>","text":"<p>Extracts specific field values from task text using regex patterns.</p>"},{"location":"api/#parameters_7","title":"Parameters:","text":"<ul> <li><code>task_text</code> (str): The text content of a task.</li> </ul>"},{"location":"api/#returns_5","title":"Returns:","text":"<ul> <li>Dict[str, str]: A dictionary of extracted field values.</li> </ul>"},{"location":"api/#get_tasksself-list_id-str-listdictstr-unionstr-none","title":"<code>get_tasks(self, list_id: str) -&gt; List[Dict[str, Union[str, None]]]</code>","text":"<p>Fetches and caches tasks from a specific list.</p>"},{"location":"api/#parameters_8","title":"Parameters:","text":"<ul> <li><code>list_id</code> (str): The ID of the task list.</li> </ul>"},{"location":"api/#returns_6","title":"Returns:","text":"<ul> <li>List[Dict[str, Union[str, None]]]: A list of tasks with relevant fields.</li> </ul>"},{"location":"api/#filter_tasksself-tasks-listdict-listdict","title":"<code>filter_tasks(self, tasks: List[Dict]) -&gt; List[Dict]</code>","text":"<p>Filters and processes tasks for specific fields and formatting.</p>"},{"location":"api/#parameters_9","title":"Parameters:","text":"<ul> <li><code>tasks</code> (List[Dict]): The list of tasks to filter.</li> </ul>"},{"location":"api/#returns_7","title":"Returns:","text":"<ul> <li>List[Dict]: The filtered and processed list of tasks.</li> </ul>"},{"location":"api/#usage-example","title":"Usage Example","text":"<pre><code>from clickup_api import ClickUpAPI\nimport asyncio\n\napi_key = 'your_clickup_api_key'\ntimezone = 'UTC'\nredis_url = 'redis://localhost:6379/0'\nlist_id = 'your_list_id'\n\nclickup_api = ClickUpAPI(api_key, timezone, redis_url)\n\nasync def main():\n    tasks = await clickup_api.get_tasks(list_id)\n    filtered_tasks = clickup_api.filter_tasks(tasks)\n    print(filtered_tasks)\n\nasyncio.run(main())\n</code></pre>"},{"location":"backup/","title":"This script are a backup of the complete structure of the on produce code","text":""},{"location":"backup/#backup-script-documentation","title":"Backup Script Documentation","text":""},{"location":"backup/#overview","title":"Overview","text":"<p>This script fetches and processes task data from the ClickUp API, leveraging FastAPI for the API interface and environment variables for configuration. Regular expressions are used for parsing specific fields from task text.</p>"},{"location":"backup/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>CLICKUP_API_KEY</code>: The API key for authenticating with the ClickUp API.</li> </ul>"},{"location":"backup/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /get_data_organized/{list_id}</code>: Retrieves and organizes data from the ClickUp API for a specified list.</li> </ul>"},{"location":"backup/#setup","title":"Setup","text":"<ol> <li>Install dependencies using <code>pip install -r requirements.txt</code>.</li> <li>Ensure the <code>.env</code> file is present with the <code>CLICKUP_API_KEY</code>.</li> </ol>"},{"location":"backup/#fastapi-application","title":"FastAPI Application","text":""},{"location":"backup/#endpoint-get-get_data_organizedlist_id","title":"Endpoint: <code>GET /get_data_organized/{list_id}</code>","text":"<p>Retrieves and organizes data from the ClickUp API.</p>"},{"location":"backup/#parameters","title":"Parameters:","text":"<ul> <li><code>list_id</code> (str): The ID of the ClickUp list.</li> </ul>"},{"location":"backup/#returns","title":"Returns:","text":"<ul> <li><code>filtered_data</code> (list): A list of dictionaries containing the filtered and organized data.</li> </ul>"},{"location":"backup/#raises","title":"Raises:","text":"<ul> <li><code>HTTPException</code>: If the list ID is invalid or if there is an error processing a task.</li> <li><code>HTTPException</code>: If there is an HTTP error while making the API request.</li> <li><code>HTTPException</code>: If there is an unknown error.</li> </ul>"},{"location":"backup/#clickupapi-class","title":"ClickUpAPI Class","text":""},{"location":"backup/#attributes","title":"Attributes:","text":"<ul> <li><code>api_key</code>: The API key for authentication with ClickUp.</li> <li><code>timezone</code>: The timezone for date/time conversions.</li> <li><code>headers</code>: Headers for HTTP requests, including the API key.</li> <li><code>semaphore</code>: Limits the number of concurrent tasks to avoid overwhelming the server.</li> <li><code>FIELD_NAMES</code>: List of field names for parsing.</li> <li><code>FIELD_PATTERNS</code>: Dictionary of compiled regular expressions for each field.</li> </ul>"},{"location":"backup/#methods","title":"Methods:","text":"<ul> <li><code>__init__(self, api_key: str, timezone: str)</code>: Initializes the ClickUpAPI instance.</li> <li><code>fetch_clickup_data(self, url: str, query: Dict, retries: int = 3) -&gt; Dict</code>: Asynchronously fetches data from the ClickUp API with retries.</li> <li><code>fetch_all_tasks(self, url: str, initial_query: Dict, start_page: int, end_page: int) -&gt; List[Dict]</code>: Asynchronously fetches all tasks, handling pagination.</li> <li><code>parse_task_text(self, task_text: str) -&gt; str</code>: Parses and cleans up task text.</li> <li><code>parse_date(self, timestamp: int) -&gt; str</code>: Converts a timestamp to a formatted date string.</li> <li><code>extract_field_values(self, task_text: str) -&gt; Dict[str, str]</code>: Extracts specific field values from task text using regex patterns.</li> <li><code>get_tasks(self, list_id: str) -&gt; List[Dict[str, Union[str, None]]]</code>: Fetches and processes tasks from a specific list.</li> <li><code>filter_tasks(self, tasks: List[Dict]) -&gt; List[Dict]</code>: Filters and processes tasks for specific fields and formatting.</li> </ul>"},{"location":"backup/#detailed-method-documentation","title":"Detailed Method Documentation","text":""},{"location":"backup/#__init__self-api_key-str-timezone-str","title":"<code>__init__(self, api_key: str, timezone: str)</code>","text":"<p>Initializes the ClickUpAPI instance.</p>"},{"location":"backup/#parameters_1","title":"Parameters:","text":"<ul> <li><code>api_key</code> (str): The ClickUp API key.</li> <li><code>timezone</code> (str): The timezone for date/time conversions.</li> </ul>"},{"location":"backup/#fetch_clickup_dataself-url-str-query-dict-retries-int-3-dict","title":"<code>fetch_clickup_data(self, url: str, query: Dict, retries: int = 3) -&gt; Dict</code>","text":"<p>Asynchronously fetches data from the ClickUp API with retries.</p>"},{"location":"backup/#parameters_2","title":"Parameters:","text":"<ul> <li><code>url</code> (str): The API endpoint URL.</li> <li><code>query</code> (Dict): Query parameters for the API request.</li> <li><code>retries</code> (int, optional): Number of retry attempts in case of failure. Default is 3.</li> </ul>"},{"location":"backup/#returns_1","title":"Returns:","text":"<ul> <li><code>Dict</code>: The JSON response from the API.</li> </ul>"},{"location":"backup/#fetch_all_tasksself-url-str-initial_query-dict-start_page-int-end_page-int-listdict","title":"<code>fetch_all_tasks(self, url: str, initial_query: Dict, start_page: int, end_page: int) -&gt; List[Dict]</code>","text":"<p>Asynchronously fetches all tasks, handling pagination.</p>"},{"location":"backup/#parameters_3","title":"Parameters:","text":"<ul> <li><code>url</code> (str): The API endpoint URL.</li> <li><code>initial_query</code> (Dict): Initial query parameters for the API request.</li> <li><code>start_page</code> (int): The starting page for pagination.</li> <li><code>end_page</code> (int): The ending page for pagination.</li> </ul>"},{"location":"backup/#returns_2","title":"Returns:","text":"<ul> <li><code>List[Dict]</code>: A list of tasks.</li> </ul>"},{"location":"backup/#parse_task_textself-task_text-str-str","title":"<code>parse_task_text(self, task_text: str) -&gt; str</code>","text":"<p>Parses and cleans up task text.</p>"},{"location":"backup/#parameters_4","title":"Parameters:","text":"<ul> <li><code>task_text</code> (str): The text content of a task.</li> </ul>"},{"location":"backup/#returns_3","title":"Returns:","text":"<ul> <li><code>str</code>: The cleaned-up task text.</li> </ul>"},{"location":"backup/#parse_dateself-timestamp-int-str","title":"<code>parse_date(self, timestamp: int) -&gt; str</code>","text":"<p>Converts a timestamp to a formatted date string.</p>"},{"location":"backup/#parameters_5","title":"Parameters:","text":"<ul> <li><code>timestamp</code> (int): The timestamp to convert.</li> </ul>"},{"location":"backup/#returns_4","title":"Returns:","text":"<ul> <li><code>str</code>: The formatted date string.</li> </ul>"},{"location":"backup/#extract_field_valuesself-task_text-str-dictstr-str","title":"<code>extract_field_values(self, task_text: str) -&gt; Dict[str, str]</code>","text":"<p>Extracts specific field values from task text using regex patterns.</p>"},{"location":"backup/#parameters_6","title":"Parameters:","text":"<ul> <li><code>task_text</code> (str): The text content of a task.</li> </ul>"},{"location":"backup/#returns_5","title":"Returns:","text":"<ul> <li><code>Dict[str, str]</code>: A dictionary of extracted field values.</li> </ul>"},{"location":"backup/#get_tasksself-list_id-str-listdictstr-unionstr-none","title":"<code>get_tasks(self, list_id: str) -&gt; List[Dict[str, Union[str, None]]]</code>","text":"<p>Fetches and processes tasks from a specific list.</p>"},{"location":"backup/#parameters_7","title":"Parameters:","text":"<ul> <li><code>list_id</code> (str): The ID of the task list.</li> </ul>"},{"location":"backup/#returns_6","title":"Returns:","text":"<ul> <li><code>List[Dict[str, Union[str, None]]]</code>: A list of tasks with relevant fields.</li> </ul>"},{"location":"backup/#filter_tasksself-tasks-listdict-listdict","title":"<code>filter_tasks(self, tasks: List[Dict]) -&gt; List[Dict]</code>","text":"<p>Filters and processes tasks for specific fields and formatting.</p>"},{"location":"backup/#parameters_8","title":"Parameters:","text":"<ul> <li><code>tasks</code> (List[Dict]): The list of tasks to filter.</li> </ul>"},{"location":"backup/#returns_7","title":"Returns:","text":"<ul> <li><code>List[Dict]</code>: The filtered and processed list of tasks.</li> </ul>"},{"location":"backup/#usage-example","title":"Usage Example","text":"<pre><code>from backup import ClickUpAPI\nimport asyncio\n\napi_key = 'your_clickup_api_key'\ntimezone = 'America/Sao_Paulo'\nlist_id = 'your_list_id'\n\nclickup_api = ClickUpAPI(api_key, timezone)\n\nasync def main():\n    tasks = await clickup_api.get_tasks(list_id)\n    filtered_tasks = clickup_api.filter_tasks(tasks)\n    print(filtered_tasks)\n\nasyncio.run(main())\n</code></pre>"},{"location":"docker/","title":"Dockerfile Documentation","text":""},{"location":"docker/#overview","title":"Overview","text":"<p>This Dockerfile is used to create a container for a FastAPI application. It uses Python 3.10 and Poetry for dependency management.</p>"},{"location":"docker/#instructions-breakdown","title":"Instructions Breakdown","text":""},{"location":"docker/#base-image","title":"Base Image","text":"<ul> <li>Python 3.10.0: The Dockerfile starts by pulling the official Python 3.10.0 image.     <code>dockerfile     FROM python:3.10.0</code></li> </ul>"},{"location":"docker/#install-poetry","title":"Install Poetry","text":"<ul> <li>Poetry: Poetry is installed using pip to manage project dependencies.     <code>dockerfile     RUN pip install poetry</code></li> </ul>"},{"location":"docker/#copy-project-files","title":"Copy Project Files","text":"<ul> <li>Copy pyproject.toml and poetry.lock: These files are copied to the <code>/src</code> directory in the container. These files contain the project's dependency specifications.     <code>dockerfile     COPY . /src</code></li> </ul>"},{"location":"docker/#set-working-directory","title":"Set Working Directory","text":"<ul> <li>Working Directory: The working directory inside the container is set to <code>/src</code>.     <code>dockerfile     WORKDIR /src</code></li> </ul>"},{"location":"docker/#install-dependencies","title":"Install Dependencies","text":"<ul> <li>Install Dependencies: Poetry is used to install the project's dependencies specified in <code>pyproject.toml</code> and <code>poetry.lock</code>, without installing the project itself.     <code>dockerfile     RUN poetry install --no-root</code></li> </ul>"},{"location":"docker/#copy-application-code","title":"Copy Application Code","text":"<ul> <li>Copy Remaining Code: The rest of the application code is copied into the <code>/src</code> directory.     <code>dockerfile     COPY . .</code></li> </ul>"},{"location":"docker/#expose-port","title":"Expose Port","text":"<ul> <li>Expose Port 8000: The container exposes port 8000 to allow external access to the FastAPI application.     <code>dockerfile     EXPOSE 8000</code></li> </ul>"},{"location":"docker/#run-the-application","title":"Run the Application","text":"<ul> <li>Command to Run Application: The container is set to run the FastAPI application using Uvicorn. It will listen on all network interfaces (<code>0.0.0.0</code>) and use port 8000.     <code>dockerfile     CMD [\"poetry\", \"run\", \"uvicorn\", \"src.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]</code></li> </ul>"},{"location":"docker/#complete-dockerfile","title":"Complete Dockerfile","text":"<p>```dockerfile</p>"},{"location":"docker/#use-a-imagem-base-oficial-do-python","title":"Use a imagem base oficial do Python","text":"<p>FROM python:3.10.0</p>"},{"location":"docker/#instale-o-poetry","title":"Instale o Poetry","text":"<p>RUN pip install poetry</p>"},{"location":"docker/#copia-o-pyprojecttoml-e-o-poetrylock-para-o-diretorio-de-trabalho","title":"Copia o pyproject.toml e o poetry.lock para o diret\u00f3rio de trabalho","text":"<p>COPY . /src</p>"},{"location":"docker/#define-o-diretorio-de-trabalho-dentro-do-container","title":"Define o diret\u00f3rio de trabalho dentro do container","text":"<p>WORKDIR /src</p>"},{"location":"docker/#instala-as-dependencias-do-projeto-usando-o-poetry","title":"Instala as depend\u00eancias do projeto usando o Poetry","text":"<p>RUN poetry install --no-root</p>"},{"location":"docker/#copia-o-restante-do-codigo-da-aplicacao-para-o-diretorio-de-trabalho","title":"Copia o restante do c\u00f3digo da aplica\u00e7\u00e3o para o diret\u00f3rio de trabalho","text":"<p>COPY . .</p>"},{"location":"docker/#expoe-a-porta-8000-para-acesso-a-aplicacao-fastapi","title":"Exp\u00f5e a porta 8000 para acesso \u00e0 aplica\u00e7\u00e3o FastAPI","text":"<p>EXPOSE 8000</p>"},{"location":"docker/#define-o-comando-para-rodar-a-aplicacao","title":"Define o comando para rodar a aplica\u00e7\u00e3o","text":"<p>CMD [\"poetry\", \"run\", \"uvicorn\", \"src.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]</p>"},{"location":"main/","title":"main.py Documentation","text":""},{"location":"main/#overview","title":"Overview","text":"<p>This script sets up the FastAPI application and includes the routes for ClickUp-related endpoints.</p>"},{"location":"main/#environment-variables","title":"Environment Variables","text":"<ul> <li>The script uses environment variables which are loaded from a <code>.env</code> file using <code>python-dotenv</code>.</li> </ul>"},{"location":"main/#setup-steps","title":"Setup Steps","text":""},{"location":"main/#load-environment-variables","title":"Load Environment Variables","text":"<ul> <li> <p>Load Environment Variables: The <code>load_dotenv</code> function is called to load environment variables from a <code>.env</code> file into the application.     ```python     import os     from dotenv import load_dotenv</p> <p>load_dotenv() ```</p> </li> </ul>"},{"location":"main/#initialize-fastapi-application","title":"Initialize FastAPI Application","text":"<ul> <li> <p>FastAPI Instance: An instance of the FastAPI application is created.     ```python     from fastapi import FastAPI</p> <p>app = FastAPI() ```</p> </li> </ul>"},{"location":"main/#include-routers","title":"Include Routers","text":"<ul> <li> <p>Include ClickUp Router: The router for ClickUp routes, defined in <code>clickup_routes.py</code>, is included in the FastAPI application.     ```python     from routes.clickup_routes import router as clickup_router</p> <p>app.include_router(clickup_router) ```</p> </li> </ul>"},{"location":"main/#complete-code","title":"Complete Code","text":"<p>```python import os</p> <p>from dotenv import load_dotenv from fastapi import FastAPI</p> <p>from routes.clickup_routes import router as clickup_router</p>"},{"location":"main/#load-environment-variables_1","title":"Load environment variables","text":"<p>load_dotenv()</p>"},{"location":"main/#set-up-fastapi","title":"Set up FastAPI","text":"<p>app = FastAPI()</p>"},{"location":"main/#include-the-router-for-clickup-routes","title":"Include the router for ClickUp routes","text":"<p>app.include_router(clickup_router)</p>"},{"location":"routes/","title":"clickup_routes.py Documentation","text":""},{"location":"routes/#overview","title":"Overview","text":"<p>This script sets up a FastAPI router for handling ClickUp-related endpoints. It includes a route to fetch and organize data from the ClickUp API.</p>"},{"location":"routes/#environment-variables","title":"Environment Variables","text":"<ul> <li>The script uses environment variables to access the ClickUp API key and Redis URL. These are loaded using <code>os.getenv</code>.</li> </ul>"},{"location":"routes/#setup-steps","title":"Setup Steps","text":""},{"location":"routes/#imports-and-router-initialization","title":"Imports and Router Initialization","text":"<ul> <li>Imports: Necessary libraries and modules are imported. The ClickUpAPI class is imported from the <code>clickup_api</code> module.</li> <li> <p>Router Initialization: An instance of the FastAPI <code>APIRouter</code> is created.     ```python     import os     import httpx     from fastapi import APIRouter, HTTPException     from api.clickup_api import ClickUpAPI  # Importe ajustado conforme a estrutura do seu projeto</p> <p>router = APIRouter() ```</p> </li> </ul>"},{"location":"routes/#load-environment-variables","title":"Load Environment Variables","text":"<ul> <li>API Key and Redis URL: The ClickUp API key and Redis URL are loaded from environment variables.     <code>python     API_KEY = os.getenv('CLICKUP_API_KEY')     REDIS_URL = os.getenv('REDIS_URL')   # URL interna do Redis no Render</code></li> </ul>"},{"location":"routes/#endpoint-definition","title":"Endpoint Definition","text":"<ul> <li>Get Data Organized: An endpoint is defined to fetch and organize data from the ClickUp API. It uses the <code>ClickUpAPI</code> class to fetch and filter tasks.     ```python     @router.get('/get_data_organized/{list_id}')     async def get_clickup_data(list_id: str):         if not list_id.isalnum():             raise HTTPException(status_code=400, detail='Invalid list ID.')<pre><code>try:\n    clickup_api = ClickUpAPI(\n        api_key=API_KEY, timezone='America/Sao_Paulo', redis_url=REDIS_URL\n    )\n    tasks = await clickup_api.get_tasks(list_id)\n    filtered_data = clickup_api.filter_tasks(tasks)\n    return filtered_data\nexcept httpx.HTTPError as http_err:\n    raise HTTPException(\n        status_code=500, detail=f'HTTP error: {str(http_err)}'\n    )\nexcept Exception as e:\n    raise HTTPException(status_code=500, detail=f'Unknown error: {str(e)}')\n</code></pre> <p>```</p> </li> </ul>"},{"location":"routes/#complete-code","title":"Complete Code","text":"<pre><code>import os\nimport httpx\nfrom fastapi import APIRouter, HTTPException\nfrom api.clickup_api import ClickUpAPI  # Importe ajustado conforme a estrutura do seu projeto\n\nrouter = APIRouter()\n\nAPI_KEY = os.getenv('CLICKUP_API_KEY')\nREDIS_URL = os.getenv('REDIS_URL')   # URL interna do Redis no Render\n\n@router.get('/get_data_organized/{list_id}')\nasync def get_clickup_data(list_id: str):\n    if not list_id.isalnum():\n        raise HTTPException(status_code=400, detail='Invalid list ID.')\n\n    try:\n        clickup_api = ClickUpAPI(\n            api_key=API_KEY, timezone='America/Sao_Paulo', redis_url=REDIS_URL\n        )\n        tasks = await clickup_api.get_tasks(list_id)\n        filtered_data = clickup_api.filter_tasks(tasks)\n        return filtered_data\n    except httpx.HTTPError as http_err:\n        raise HTTPException(\n            status_code=500, detail=f'HTTP error: {str(http_err)}'\n        )\n    except Exception as e:\n        raise HTTPException(status_code=500, detail='Unknown error: {str(e)}')\n</code></pre>"},{"location":"tests/","title":"Tests","text":"<p>cat &lt;&lt; 'EOF' &gt; testes_fastapi.md</p>"},{"location":"tests/#testes-automatizados-em-pytest-para-fastapi","title":"Testes Automatizados em Pytest para FastAPI","text":""},{"location":"tests/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este arquivo cont\u00e9m testes automatizados utilizando Pytest para verificar o comportamento da API FastAPI implementada no arquivo <code>backup.py</code>.</p>"},{"location":"tests/#configuracao-inicial","title":"Configura\u00e7\u00e3o Inicial","text":"<p>Antes de executar os testes, o ambiente deve estar configurado com o Pytest instalado e um cliente de teste configurado para interagir com a aplica\u00e7\u00e3o FastAPI.</p> <p>```python import pytest from fastapi.testclient import TestClient from backup import app</p> <p>client = TestClient(app)</p> <p>valid_list_id = '174940580' invalid_list_id = '123456789'</p>"},{"location":"utils/","title":"parse_date Function Documentation","text":""},{"location":"utils/#overview","title":"Overview","text":"<p>This function parses a UNIX timestamp into a formatted date string in the specified timezone using the <code>datetime</code> and <code>pytz</code> libraries.</p>"},{"location":"utils/#parameters","title":"Parameters","text":"<ul> <li><code>timestamp</code> (int): UNIX timestamp in milliseconds.</li> <li><code>timezone</code> (pytz.timezone): Timezone object from the <code>pytz</code> library used to localize the timestamp.</li> </ul>"},{"location":"utils/#returns","title":"Returns","text":"<ul> <li><code>str</code>: Formatted date string in the format '%d-%m-%Y %H:%M:%S'.</li> </ul>"},{"location":"utils/#function-implementation","title":"Function Implementation","text":"<p>The function converts the UNIX timestamp to UTC time, applies the specified timezone conversion, and formats the resulting datetime object into a string.</p> <pre><code>from datetime import datetime\nimport pytz\n\ndef parse_date(timestamp: int, timezone: pytz.timezone) -&gt; str:\n    return (\n        datetime.utcfromtimestamp(int(timestamp) / 1000)\n        .replace(tzinfo=pytz.utc)\n        .astimezone(timezone)\n        .strftime('%d-%m-%Y %H:%M:%S')\n    )\n</code></pre>"},{"location":"utils/#field_patterns-documentation","title":"FIELD_PATTERNS Documentation","text":""},{"location":"utils/#overview_1","title":"Overview","text":"<p>This dictionary <code>FIELD_PATTERNS</code> contains compiled regular expressions for extracting field values from task descriptions based on predefined field names (<code>FIELD_NAMES</code>).</p>"},{"location":"utils/#field-names","title":"Field Names","text":"<p>The <code>FIELD_NAMES</code> list defines the names of the fields for which patterns are compiled.</p> <pre><code>FIELD_NAMES = [\n    'CARTEIRA DEMANDANTE',\n    'E-MAIL',\n    'ESCOPO',\n    'OBS',\n    'OBJETIVO DO GANHO',\n    'KPI GANHO',\n    '\ud83d\udca1 TIPO DE PROJETO',\n    'TIPO DE PROJETO',\n    'TIPO DE OPERA\u00c7\u00c3O',\n    'PRODUTO',\n    'OPERA\u00c7\u00c3O',\n    'SITE',\n    'UNIDADE DE NEG\u00d3CIO',\n    'DIRETOR TAHTO',\n    'CLIENTE',\n    'TIPO',\n    '\ud83d\udca1 R$ ANUAL (PREVISTO)',\n    'GERENTE OI',\n    'FERRAMENTA ENVOLVIDA',\n    'CEN\u00c1RIO PROPOSTO',\n    'DATA ALVO',\n]\n</code></pre>"},{"location":"utils/#field-patterns-function-documentation","title":"Field Patterns Function documentation","text":""},{"location":"utils/#regular-expressions-the-patterns-are-compiled-using-pythons-recompile-function-each-pattern-is-designed-to-match-a-specific-field-name-followed-by-a-colon-and-its-corresponding-value-ignoring-case","title":"Regular Expressions: The patterns are compiled using Python's re.compile() function. Each pattern is designed to match a specific field name followed by a colon (:) and its corresponding value, ignoring case.","text":""},{"location":"utils/#usage-these-patterns-are-used-in-functions-such-as-extract_field_values-to-extract-specific-information-from-task-descriptions","title":"Usage: These patterns are used in functions such as extract_field_values() to extract specific information from task descriptions.","text":"<pre><code>import re\n\nFIELD_PATTERNS = {\n    field_name: re.compile(\n        rf'{re.escape(field_name)}\\s*:\\s*(.*?)(?=\\s*({\"|\".join([re.escape(name) for name in FIELD_NAMES])})\\s*:|$)',\n        re.IGNORECASE,\n    )\n    for field_name in FIELD_NAMES\n}\n</code></pre>"}]}